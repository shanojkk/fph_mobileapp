// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/auth/user.dart';
import '../models/biometric/biometric_reading.dart';
import '../models/user_management/comm_preferences.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1264292676635052990),
      name: 'CommPreferences',
      lastPropertyId: const IdUid(5, 5331006957701159694),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8646398236689993127),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3433527516042280318),
            name: 'commPreferenceID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9045344765141545545),
            name: 'userID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4129576885650683616),
            name: 'commTypeID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5331006957701159694),
            name: 'notificationType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3185363224557479632),
      name: 'User',
      lastPropertyId: const IdUid(24, 6828948634230503805),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 111470693421367517),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8929932626386168169),
            name: 'userID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 391016471943187591),
            name: 'tenantId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4144026422811778502),
            name: 'parentId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2493766297742400906),
            name: 'mobileNumer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1110728822639995536),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5846216925257605792),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7127119791629392177),
            name: 'passcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1698310493794400894),
            name: 'hasAcceptedTnC',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8415587527815560160),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 505084117165089873),
            name: 'remarks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3468522883225439970),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 771200275662035930),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7750859046970039756),
            name: 'middleName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5826611525868433706),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 2806751451736172371),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2794707098044684879),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 425830495663784688),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7858362019050085177),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7236509228869828488),
            name: 'pinCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4870853922672180382),
            name: 'dob',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4459026381510009407),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 4805939265033636668),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6828948634230503805),
            name: 'countryCode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4625167770952327915),
      name: 'BiometricReading',
      lastPropertyId: const IdUid(9, 8238704909695741864),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7145864408044194081),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3382155857672907105),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8175490072933169724),
            name: 'readOn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2277758976782503082),
            name: 'mac',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8011633703487216902),
            name: 'ipAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3141006414417347684),
            name: 'deviceTypeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2308584491131906854),
            name: 'scheduleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 5632919561355111143),
            relationTarget: 'BiometricSchedule'),
        ModelProperty(
            id: const IdUid(9, 8238704909695741864),
            name: 'deviceName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 7743097646569785329),
            name: 'measurements',
            targetId: const IdUid(8, 3679499317838178902))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 3679499317838178902),
      name: 'BiometricMeasurement',
      lastPropertyId: const IdUid(7, 9076610209361551702),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8092738798156034901),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6310832937097627443),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3299995725421684057),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8199181427967353927),
            name: 'unit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7176947987009771001),
            name: 'adherence',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7748450904280955105),
            name: 'adherenceRange',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 2514749867217775714),
      name: 'BiometricSchedule',
      lastPropertyId: const IdUid(6, 2537942847050388924),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7757394653989358175),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5201399010138786408),
            name: 'mealInfo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1046032162938781248),
            name: 'medicineInfo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2943197686787151301),
            name: 'timeOfDay',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 2514749867217775714),
      lastIndexId: const IdUid(5, 5632919561355111143),
      lastRelationId: const IdUid(8, 4444339870773866466),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        8992466900602769539,
        7092396959153365698,
        8053522308065750414,
        8534860250032173546
      ],
      retiredIndexUids: const [
        3425297742687847251,
        2097575982583440323,
        1554310060463437125,
        1152924930359983519
      ],
      retiredPropertyUids: const [
        5215551403462837295,
        4417919748741863148,
        5752982770136591016,
        1210928816691156592,
        2973880664287809833,
        1924863959736897348,
        5035208175011463766,
        6233771486108250057,
        1863326047669872046,
        3200087730103328737,
        6285505552556262654,
        7338157760651508485,
        4894410709949866147,
        3612850937542160941,
        4064639980995654592,
        5805719538937423606,
        3551987174544769698,
        2188059452779599872,
        1490149318759960430,
        720466367134186485,
        6216093702314848864,
        5867323385334948752,
        2276329792472554044,
        7610527844575627084,
        2537942847050388924,
        9076610209361551702
      ],
      retiredRelationUids: const [
        1075074848449898717,
        7004205411141073800,
        4696431231524521677,
        7112607745242591539,
        4444339870773866466
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CommPreferences: EntityDefinition<CommPreferences>(
        model: _entities[0],
        toOneRelations: (CommPreferences object) => [],
        toManyRelations: (CommPreferences object) => {},
        getId: (CommPreferences object) => object.id,
        setId: (CommPreferences object, int id) {
          object.id = id;
        },
        objectToFB: (CommPreferences object, fb.Builder fbb) {
          final commPreferenceIDOffset = object.commPreferenceID == null
              ? null
              : fbb.writeString(object.commPreferenceID!);
          final userIDOffset =
              object.userID == null ? null : fbb.writeString(object.userID!);
          final commTypeIDOffset = object.commTypeID == null
              ? null
              : fbb.writeString(object.commTypeID!);
          final notificationTypeOffset = object.notificationType == null
              ? null
              : fbb.writeString(object.notificationType!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, commPreferenceIDOffset);
          fbb.addOffset(2, userIDOffset);
          fbb.addOffset(3, commTypeIDOffset);
          fbb.addOffset(4, notificationTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CommPreferences(
              commPreferenceID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              commTypeID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              notificationType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              userID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIDOffset =
              object.userID == null ? null : fbb.writeString(object.userID!);
          final tenantIdOffset = object.tenantId == null
              ? null
              : fbb.writeString(object.tenantId!);
          final parentIdOffset = object.parentId == null
              ? null
              : fbb.writeString(object.parentId!);
          final mobileNumerOffset = object.mobileNumer == null
              ? null
              : fbb.writeString(object.mobileNumer!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final passcodeOffset = object.passcode == null
              ? null
              : fbb.writeString(object.passcode!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final middleNameOffset = object.middleName == null
              ? null
              : fbb.writeString(object.middleName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final pinCodeOffset =
              object.pinCode == null ? null : fbb.writeString(object.pinCode!);
          final dobOffset =
              object.dob == null ? null : fbb.writeString(object.dob!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final countryCodeOffset = object.countryCode == null
              ? null
              : fbb.writeString(object.countryCode!);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIDOffset);
          fbb.addOffset(2, tenantIdOffset);
          fbb.addOffset(3, parentIdOffset);
          fbb.addOffset(4, mobileNumerOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.addOffset(7, passcodeOffset);
          fbb.addBool(8, object.hasAcceptedTnC);
          fbb.addOffset(9, statusOffset);
          fbb.addOffset(10, remarksOffset);
          fbb.addOffset(11, titleOffset);
          fbb.addOffset(12, firstNameOffset);
          fbb.addOffset(13, middleNameOffset);
          fbb.addOffset(14, lastNameOffset);
          fbb.addOffset(15, addressOffset);
          fbb.addOffset(16, cityOffset);
          fbb.addOffset(17, stateOffset);
          fbb.addOffset(18, countryOffset);
          fbb.addOffset(19, pinCodeOffset);
          fbb.addOffset(20, dobOffset);
          fbb.addOffset(21, genderOffset);
          fbb.addFloat64(22, object.height);
          fbb.addOffset(23, countryCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40),
              countryCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50),
              dob: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              gender:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              hasAcceptedTnC: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20),
              height: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 48),
              lastName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              middleName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              mobileNumer: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 12),
              parentId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 10),
              passcode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              password: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              pinCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              remarks: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              state: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              status: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              tenantId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 8),
              title: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              userID: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 6))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    BiometricReading: EntityDefinition<BiometricReading>(
        model: _entities[2],
        toOneRelations: (BiometricReading object) => [object.schedule],
        toManyRelations: (BiometricReading object) => {
              RelInfo<BiometricReading>.toMany(7, object.id):
                  object.measurements
            },
        getId: (BiometricReading object) => object.id,
        setId: (BiometricReading object, int id) {
          object.id = id;
        },
        objectToFB: (BiometricReading object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final readOnOffset =
              object.readOn == null ? null : fbb.writeString(object.readOn!);
          final macOffset =
              object.mac == null ? null : fbb.writeString(object.mac!);
          final ipAddressOffset = object.ipAddress == null
              ? null
              : fbb.writeString(object.ipAddress!);
          final deviceTypeIdOffset = object.deviceTypeId == null
              ? null
              : fbb.writeString(object.deviceTypeId!);
          final deviceNameOffset = object.deviceName == null
              ? null
              : fbb.writeString(object.deviceName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, readOnOffset);
          fbb.addOffset(3, macOffset);
          fbb.addOffset(4, ipAddressOffset);
          fbb.addOffset(5, deviceTypeIdOffset);
          fbb.addInt64(7, object.schedule.targetId);
          fbb.addOffset(8, deviceNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BiometricReading(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              readOn: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              mac: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              ipAddress: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              deviceTypeId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              deviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.schedule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.schedule.attach(store);
          InternalToManyAccess.setRelInfo(
              object.measurements,
              store,
              RelInfo<BiometricReading>.toMany(7, object.id),
              store.box<BiometricReading>());
          return object;
        }),
    BiometricMeasurement: EntityDefinition<BiometricMeasurement>(
        model: _entities[3],
        toOneRelations: (BiometricMeasurement object) => [],
        toManyRelations: (BiometricMeasurement object) => {},
        getId: (BiometricMeasurement object) => object.id,
        setId: (BiometricMeasurement object, int id) {
          object.id = id;
        },
        objectToFB: (BiometricMeasurement object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          final unitOffset =
              object.unit == null ? null : fbb.writeString(object.unit!);
          final adherenceOffset = object.adherence == null
              ? null
              : fbb.writeString(object.adherence!);
          final adherenceRangeOffset = object.adherenceRange == null
              ? null
              : fbb.writeString(object.adherenceRange!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addOffset(3, unitOffset);
          fbb.addOffset(4, adherenceOffset);
          fbb.addOffset(5, adherenceRangeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BiometricMeasurement(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              unit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              adherence: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              adherenceRange: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    BiometricSchedule: EntityDefinition<BiometricSchedule>(
        model: _entities[4],
        toOneRelations: (BiometricSchedule object) => [],
        toManyRelations: (BiometricSchedule object) => {},
        getId: (BiometricSchedule object) => object.id,
        setId: (BiometricSchedule object, int id) {
          object.id = id;
        },
        objectToFB: (BiometricSchedule object, fb.Builder fbb) {
          final mealInfoOffset = object.mealInfo == null
              ? null
              : fbb.writeString(object.mealInfo!);
          final medicineInfoOffset = object.medicineInfo == null
              ? null
              : fbb.writeString(object.medicineInfo!);
          final timeOfDayOffset = object.timeOfDay == null
              ? null
              : fbb.writeString(object.timeOfDay!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mealInfoOffset);
          fbb.addOffset(2, medicineInfoOffset);
          fbb.addOffset(3, timeOfDayOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BiometricSchedule(
              mealInfo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              medicineInfo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              timeOfDay: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CommPreferences] entity fields to define ObjectBox queries.
class CommPreferences_ {
  /// see [CommPreferences.id]
  static final id =
      QueryIntegerProperty<CommPreferences>(_entities[0].properties[0]);

  /// see [CommPreferences.commPreferenceID]
  static final commPreferenceID =
      QueryStringProperty<CommPreferences>(_entities[0].properties[1]);

  /// see [CommPreferences.userID]
  static final userID =
      QueryStringProperty<CommPreferences>(_entities[0].properties[2]);

  /// see [CommPreferences.commTypeID]
  static final commTypeID =
      QueryStringProperty<CommPreferences>(_entities[0].properties[3]);

  /// see [CommPreferences.notificationType]
  static final notificationType =
      QueryStringProperty<CommPreferences>(_entities[0].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.userID]
  static final userID = QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.tenantId]
  static final tenantId = QueryStringProperty<User>(_entities[1].properties[2]);

  /// see [User.parentId]
  static final parentId = QueryStringProperty<User>(_entities[1].properties[3]);

  /// see [User.mobileNumer]
  static final mobileNumer =
      QueryStringProperty<User>(_entities[1].properties[4]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[1].properties[5]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[1].properties[6]);

  /// see [User.passcode]
  static final passcode = QueryStringProperty<User>(_entities[1].properties[7]);

  /// see [User.hasAcceptedTnC]
  static final hasAcceptedTnC =
      QueryBooleanProperty<User>(_entities[1].properties[8]);

  /// see [User.status]
  static final status = QueryStringProperty<User>(_entities[1].properties[9]);

  /// see [User.remarks]
  static final remarks = QueryStringProperty<User>(_entities[1].properties[10]);

  /// see [User.title]
  static final title = QueryStringProperty<User>(_entities[1].properties[11]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[1].properties[12]);

  /// see [User.middleName]
  static final middleName =
      QueryStringProperty<User>(_entities[1].properties[13]);

  /// see [User.lastName]
  static final lastName =
      QueryStringProperty<User>(_entities[1].properties[14]);

  /// see [User.address]
  static final address = QueryStringProperty<User>(_entities[1].properties[15]);

  /// see [User.city]
  static final city = QueryStringProperty<User>(_entities[1].properties[16]);

  /// see [User.state]
  static final state = QueryStringProperty<User>(_entities[1].properties[17]);

  /// see [User.country]
  static final country = QueryStringProperty<User>(_entities[1].properties[18]);

  /// see [User.pinCode]
  static final pinCode = QueryStringProperty<User>(_entities[1].properties[19]);

  /// see [User.dob]
  static final dob = QueryStringProperty<User>(_entities[1].properties[20]);

  /// see [User.gender]
  static final gender = QueryStringProperty<User>(_entities[1].properties[21]);

  /// see [User.height]
  static final height = QueryDoubleProperty<User>(_entities[1].properties[22]);

  /// see [User.countryCode]
  static final countryCode =
      QueryStringProperty<User>(_entities[1].properties[23]);
}

/// [BiometricReading] entity fields to define ObjectBox queries.
class BiometricReading_ {
  /// see [BiometricReading.id]
  static final id =
      QueryIntegerProperty<BiometricReading>(_entities[2].properties[0]);

  /// see [BiometricReading.userId]
  static final userId =
      QueryStringProperty<BiometricReading>(_entities[2].properties[1]);

  /// see [BiometricReading.readOn]
  static final readOn =
      QueryStringProperty<BiometricReading>(_entities[2].properties[2]);

  /// see [BiometricReading.mac]
  static final mac =
      QueryStringProperty<BiometricReading>(_entities[2].properties[3]);

  /// see [BiometricReading.ipAddress]
  static final ipAddress =
      QueryStringProperty<BiometricReading>(_entities[2].properties[4]);

  /// see [BiometricReading.deviceTypeId]
  static final deviceTypeId =
      QueryStringProperty<BiometricReading>(_entities[2].properties[5]);

  /// see [BiometricReading.schedule]
  static final schedule =
      QueryRelationToOne<BiometricReading, BiometricSchedule>(
          _entities[2].properties[6]);

  /// see [BiometricReading.deviceName]
  static final deviceName =
      QueryStringProperty<BiometricReading>(_entities[2].properties[7]);

  /// see [BiometricReading.measurements]
  static final measurements =
      QueryRelationToMany<BiometricReading, BiometricMeasurement>(
          _entities[2].relations[0]);
}

/// [BiometricMeasurement] entity fields to define ObjectBox queries.
class BiometricMeasurement_ {
  /// see [BiometricMeasurement.id]
  static final id =
      QueryIntegerProperty<BiometricMeasurement>(_entities[3].properties[0]);

  /// see [BiometricMeasurement.name]
  static final name =
      QueryStringProperty<BiometricMeasurement>(_entities[3].properties[1]);

  /// see [BiometricMeasurement.value]
  static final value =
      QueryStringProperty<BiometricMeasurement>(_entities[3].properties[2]);

  /// see [BiometricMeasurement.unit]
  static final unit =
      QueryStringProperty<BiometricMeasurement>(_entities[3].properties[3]);

  /// see [BiometricMeasurement.adherence]
  static final adherence =
      QueryStringProperty<BiometricMeasurement>(_entities[3].properties[4]);

  /// see [BiometricMeasurement.adherenceRange]
  static final adherenceRange =
      QueryStringProperty<BiometricMeasurement>(_entities[3].properties[5]);
}

/// [BiometricSchedule] entity fields to define ObjectBox queries.
class BiometricSchedule_ {
  /// see [BiometricSchedule.id]
  static final id =
      QueryIntegerProperty<BiometricSchedule>(_entities[4].properties[0]);

  /// see [BiometricSchedule.mealInfo]
  static final mealInfo =
      QueryStringProperty<BiometricSchedule>(_entities[4].properties[1]);

  /// see [BiometricSchedule.medicineInfo]
  static final medicineInfo =
      QueryStringProperty<BiometricSchedule>(_entities[4].properties[2]);

  /// see [BiometricSchedule.timeOfDay]
  static final timeOfDay =
      QueryStringProperty<BiometricSchedule>(_entities[4].properties[3]);
}
